# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# see kafka.server.KafkaConfig for additional details and defaults

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
#broker.id= BROKER_ID 
broker.id={{ ansible_all_ipv4_addresses | first | split('.') | last }}

# Switch to enable topic deletion or not, default value is false
delete.topic.enable={{ delete_topic_enable }}

############################# Socket Server Settings #############################

# The address the socket server listens on. It will get the value returned from
# java.net.InetAddress.getCanonicalHostName() if not configured.
#   FORMAT:
#     listeners = listener_name://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://your.host.name:9092
{% if use_ssl| bool is false %}
listeners=PLAINTEXT://{{ ansible_host }}:9092
{% endif %}

# Hostname and port the broker will advertise to producers and consumers. If not set,
# it uses the value for "listeners" if configured.  Otherwise, it will use the value
# returned from java.net.InetAddress.getCanonicalHostName().
#advertised.listeners=PLAINTEXT://your.host.name:9092

# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL

# The number of threads doing disk I/O
# Fun fact this also affects the number of request handler threads
num.io.threads={{ num_io_threads }}

# The send buffer (SO_SNDBUF) used by the socket server
#socket.send.buffer.bytes={{ socket_send_buffer_bytes }}

# The receive buffer (SO_RCVBUF) used by the socket server
#socket.receive.buffer.bytes={{ socket_receive_buffer_bytes }}

# The maximum size of a request that the socket server will accept (protection against OOM)
#socket.request.max.bytes={{ socket_request_max_bytes }}

############################# Log Basics #############################

# A comma seperated list of directories under which to store log files
log.dirs={{ data_directory }}

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
num.partitions={{ num_partitions }}

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
num.recovery.threads.per.data.dir={{num_recovery_threads_per_data_dir}}

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to exceessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
#log.flush.interval.messages=10000

# The maximum amount of time a message can sit in a log before we force a flush
#log.flush.interval.ms=1000

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion
log.retention.hours=1

# A size-based retention policy for logs. Segments are pruned from the log as long as the remaining
# segments don't drop below log.retention.bytes.
#log.retention.bytes=1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
#log.segment.bytes=1073741824

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
#log.retention.check.interval.ms=300000

{% if use_ssl| bool is true %}
############################# Encryption #############################
ssl.truststore.location={{ certificate_path }}/truststore.jks
ssl.truststore.password={{ default_keystore_pass }}
ssl.keystore.location={{ certificate_path }}/{{ inventory_hostname }}.jks
ssl.keystore.password={{ default_keystore_pass }}
ssl.key.password={{ default_keystore_pass }}

ssl.enabled.protocols=TLSv1.2,TLSv1.1,TLSv1
security.inter.broker.protocol=SSL

ssl.keystore.type=JKS
ssl.truststore.type=JKS

ssl.client.auth={% if use_ssl_clients |bool is true%}required {% else %}none {% endif %}

{% if use_ssl_clients|bool is false %}
listeners=PLAINTEXT://{{ ansible_host }}:9092, SSL://{{ ansible_host }}:9093
{% else %}
listeners=SSL://{{ ansible_host }}:9093
{% endif %}

{% endif %}
############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
#
# Must utilize kafka chroot
zookeeper.connect={% for host in groups[zk_cluster] %}{{ host }}:{%if use_ssl_zk|bool is true%}{{ zookeeper_secure_port }}{% else %}{{ zookeeper_client_insecure_port }}{% endif %}{% if not loop.last %},{% endif %}{% endfor %}/kafka

# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms=10000

{% if use_ssl_zk|bool is true %}
zookeeper.ssl.client.enable=true
# required to use TLS to ZooKeeper
zookeeper.clientCnxnSocket=org.apache.zookeeper.ClientCnxnSocketNetty
# define key/trust stores to use TLS to ZooKeeper; ignored unless zookeeper.ssl.client.enable=true
zookeeper.ssl.keystore.location={{ certificate_path }}/{{ inventory_hostname }}.jks
zookeeper.ssl.keystore.password={{ default_keystore_pass }}
zookeeper.ssl.truststore.location={{ certificate_path }}/truststore.jks
zookeeper.ssl.truststore.password={{ default_truststore_pass }}
# tell broker to create ACLs on znodes
zookeeper.set.acl=false
{% endif %}

###################################
#### non-default configuration ####
auto.leader.rebalance.enable=true
auto.create.topics.enable=true
default.replication.factor={{ REPLICATION_FACTOR }}
controlled.shutdown.enable=true
zookeeper.session.timeout.ms=10000
message.max.bytes=52428800
replica.fetch.max.bytes=52428800
offsets.topic.replication.factor={{ REPLICATION_FACTOR }}
transaction.state.log.replication.factor={{ REPLICATION_FACTOR }}
transaction.state.log.min.isr={{ REPLICATION_FACTOR }}
num.replica.fetchers=8

# The number of threads handling network requests
num.network.threads={{ num_network_threads }}

# The maximum number of incremental fetch sessions that we will maintain
max.incremental.fetch.session.cache.slots=50000